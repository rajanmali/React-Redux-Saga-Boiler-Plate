// ---------------------------------------------------------===
// Mixins
// ---------------------------------------------------------===

// vertical align el inside parent with fixed height/min-height
// usage
// html - .parent>.child
// scss - @include v-align;
//     or @include v-align(250px);
//     or @include v-align(250px, bottom, before);
//
@mixin v-align($va-height: 100%, $va-direction: middle, $va-pseudo: after) {
  white-space: nowrap;
  text-align: center;

  &:#{$va-pseudo} {
    content: '';
    display: inline-block;
    vertical-align: $va-direction;
    width: 0;
    min-height: $va-height;
  }

  > * {
    white-space: normal;
    display: inline-block;
    vertical-align: $va-direction;
    max-width: 99%;
  }
}

// vertical align a pair of child el inside parent
// usage
// html - .post>.image+.text
// scss - @include v-align-pair(image, text);
//     or @include v-align-pair(image, text, bottom);
//     or @include v-align-pair(image, text, middle, 200px);
//
@mixin v-align-pair(
  $child-name1,
  $child-name2,
  $valign: middle,
  $width1: auto,
  $width2: auto
) {
  display: table;

  .#{$child-name1} {
    display: table-cell;
    vertical-align: $valign;
    width: $width1;
  }

  .#{$child-name2} {
    display: table-cell;
    vertical-align: $valign;
    width: $width2;
  }
}

// vertical align el
// usage: @include box-align(vhc); (vertical and horizontally center)
// usage: @include box-align(vc); (only vertical center)
// usage: @include box-align(hc); (only horizontal center)

@mixin box-align($cond) {
  position: absolute;

  @if ($cond==vhc) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if ($cond==vc) {
    top: 50%;
    transform: translateY(-50%);
  } @else if ($cond==hc) {
    left: 50%;
    transform: translateX(-50%);
  }
}

// Mixin helping defining both `width` and `height` simultaneously.
//
// @author Hugo Giraudel
//
// @access public
//
// @param {Length} $width - Element’s `width`
// @param {Length} $height ($width) - Element’s `height`
//
// @example scss - Usage
//   .foo {
//     @include size(10em);
//   }
//
//   .bar {
//     @include size(100%, 10em);
//   }
//
// @example css - CSS output
//   .foo {
//     width: 10em;
//     height: 10em;
//   }
//
//   .bar {
//     width: 100%;
//     height: 10em;
//   }
//
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

// font-smothing
// @include font-smoothing(on);
// @include font-smoothing(off);
@mixin font-smoothing($value: on) {
  @if $value==on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.
//
// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement
//
// @example scss - Usage
//   .element {
//     @include hide-text;
//   }
//
// @example css - CSS Output
//   .element {
//     overflow: hidden;
//     text-indent: 101%;
//     white-space: nowrap;
//   }
//
@mixin hide-text {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;
}

// Creates a visual triangle.
// Mixin takes ($size, $color, $direction)
// The $size argument can take one or two values—width height.
// The $color argument can take one or two
// values—foreground-color background-color.
//
// @author http://bourbon.io/docs/#triangle
//
// $direction:
// up, down, left, right, up-right, up-left, down-right, down-left
// @example scss - Usage
//   @include triangle(12px, gray, down);
//   @include triangle(12px 6px, gray blue, up-left);
//
@mixin triangle($size, $color, $direction) {
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) ==2, nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction==up) or
    ($direction==down) or
    ($direction==right) or
    ($direction==left)
  {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction==up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    } @else if $direction==right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    } @else if $direction==down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    } @else if $direction==left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  } @else if ($direction==up-right) or ($direction==up-left) {
    border-top: $height solid $foreground-color;

    @if $direction==up-right {
      border-left: $width solid $background-color;
    } @else if $direction==up-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction==down-right) or ($direction==down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction==down-right {
      border-left: $width solid $background-color;
    } @else if $direction==down-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction==inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction==inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction==inset-right) {
    border-color: $background-color
      $background-color
      $background-color
      $foreground-color;
    border-style: solid;
    border-width: $width $height;
  } @else if ($direction==inset-left) {
    border-color: $background-color
      $foreground-color
      $background-color
      $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}

// Animate css properties
// usage
// scss - @include animate(color);
//     or @include animate(color width);
//     or @include animate(color width, 1s, linear);
//

@mixin animate($properties, $duration: $animation-speed, $easing: ease-in-out) {
  $list: ();

  @each $prop in $properties {
    $str: #{$prop} #{$duration} #{$easing};
    $list: join($list, #{$str}, comma);
  }

  transition: $list;
}

// Font-size px to rem calc
// @example scss - Usage
// selector {
//    @include rem-font-size(16px);
// }

@mixin rem-font-size($pxSize) {
  font-size: $pxSize;
  font-size: ($pxSize / 10px) + rem;
}

// retina image
// @include retina(sprite, png, 500px, 350px);
@mixin retina($image, $extension, $width, $height) {
  background: url('../images/' + $image + '.' + $extension) no-repeat;
  width: $width;
  height: $height;

  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    background-image: url('../images/' + $image + '@2x' + '.' + $extension);
    background-size: $width $height;
  }
}

// retina sprite
// @include sprite-retina(sprite, png, 500px, 350px, -45px, -197px);
@mixin sprite-retina(
  $image,
  $extension,
  $width,
  $height,
  $el-width,
  $el-height,
  $horizontal,
  $vertical
) {
  background: url('../images/' + $image + '.' + $extension) no-repeat
    $horizontal $vertical;
  width: $el-width;
  height: $el-height;

  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    background-image: url('../images/' + $image + '@2x' + '.' + $extension);
    background-size: $width $height;
  }
}

// @font-face code generator
// *** demo ***
// @include font-face("font-name", ("../fonts/font-file-name"), normal, normal );
@mixin font-face($font, $url, $weight: normal, $style: normal) {
  @font-face {
    font-family: $font;
    src: url('#{$url}.eot?5sv48p');
    src: url('#{$url}.eot?#iefix5sv48p') format('embedded-opentype'),
      url('#{$url}.svg?5sv48p') format('svg'),
      url('#{$url}.ttf?5sv48p') format('truetype'),
      url('#{$url}.woff?5sv48p') format('woff');
    font-weight: $weight;
    font-style: $style;
  }
}

// set font
// @include font(15px, 1.333, 500, italic);
// @include font(15px, 1.333, 500);
// @include font(15px, 1.333);
@mixin font(
  $font-size,
  $line-height,
  $font-weight: null,
  $font-style: null,
  $family: ''
) {
  @if ($family != '') {
    font: $font-style $font-weight #{$font-size}/#{$line-height} $family;
  } @else {
    font-size: $font-size;
    line-height: $line-height;
    font-weight: $font-weight;
    font-style: $font-style;
  }
}

// table-layout creation
// @include table-layout(bottom);
@mixin table-layout($align: middle) {
  display: table;
  width: 100%;
  table-layout: fixed;

  > * {
    display: table-cell;
    vertical-align: $align;
  }
}

// Outputs the spec and prefixed versions of the `::selection` pseudo-element.
// @param {Bool} $current-selector [false]
// If set to `true`, it takes the current element into consideration.
// usage:
// @include selection {
//   background-color: #f00;
// }
// .element {
//   @include selection(true) {
//     background-color: #000;
//     color: #fff;
//   }
// }

@mixin selection($current-selector: false) {
  @if $current-selector {
    &::-moz-selection {
      @content;
    }

    &::selection {
      @content;
    }
  } @else {
    ::-moz-selection {
      @content;
    }

    ::selection {
      @content;
    }
  }
}

// Provides a quick method for targeting `border-radius` on both corners on the side of a box.
//
// @param {Number} $radii
//   List of arguments
//
// @example scss - Usage
//   .element-one {
//     @include border-top-radius(5px);
//   }
//
//   .element-two {
//     @include border-left-radius(3px);
//   }
//
// @example css - CSS Output
//   .element-one {
//     border-top-left-radius: 5px;
//     border-top-right-radius: 5px;
//   }
//
//   .element-two {
//     border-bottom-left-radius: 3px;
//     border-top-left-radius: 3px;
//   }
//
// @output `border-radius`

@mixin border-top-radius($radii) {
  border-top-left-radius: $radii;
  border-top-right-radius: $radii;
}

@mixin border-right-radius($radii) {
  border-bottom-right-radius: $radii;
  border-top-right-radius: $radii;
}

@mixin border-bottom-radius($radii) {
  border-bottom-left-radius: $radii;
  border-bottom-right-radius: $radii;
}

@mixin border-left-radius($radii) {
  border-bottom-left-radius: $radii;
  border-top-left-radius: $radii;
}

// display: inline-block; extra space removing
// usage: @include dib-reset;
// @include dib-reset(middle);
@mixin dib-reset($align: top) {
  letter-spacing: -5px;

  > * {
    display: inline-block;
    vertical-align: $align;
    letter-spacing: 0;
  }
}

// Directional-property mixins are shorthands for writing properties like the following
//
// @ignore You can also use `false` instead of `null`.
//
// @param {List} $vals
//   List of directional values
//
// @example scss - Usage
//   .element {
//     @include border-style(dotted null);
//     @include margin(null 0 10px);
//   }
//
// @example css - CSS Output
//   .element {
//     border-bottom-style: dotted;
//     border-top-style: dotted;
//     margin-bottom: 10px;
//     margin-left: 0;
//     margin-right: 0;
//   }
//
// @require {function} contains-falsy
//
// @return {List}

@function collapse-directionals($vals) {
  $output: null;

  $a: nth($vals, 1);
  $b: if(length($vals) < 2, $a, nth($vals, 2));
  $c: if(length($vals) < 3, $a, nth($vals, 3));
  $d: if(length($vals) < 2, $a, nth($vals, if(length($vals) < 4, 2, 4)));

  @if $a==0 {
    $a: 0;
  }

  @if $b==0 {
    $b: 0;
  }

  @if $c==0 {
    $c: 0;
  }

  @if $d==0 {
    $d: 0;
  }

  @if $a==$b and $a==$c and $a==$d {
    $output: $a;
  } @else if $a==$c and $b==$d {
    $output: $a $b;
  } @else if $b==$d {
    $output: $a $b $c;
  } @else {
    $output: $a $b $c $d;
  }

  @return $output;
}

// Output directional properties, for instance `margin`.
//
// @access private
//
// @param {String} $pre
//   Prefix to use
// @param {String} $suf
//   Suffix to use
// @param {List} $vals
//   List of values
//
// @require {function} collapse-directionals
// @require {function} contains-falsy

@mixin directional-property($pre, $suf, $vals) {
  // Property Names
  $top: $pre + '-top' + if($suf, '-#{$suf}', '');
  $bottom: $pre + '-bottom' + if($suf, '-#{$suf}', '');
  $left: $pre + '-left' + if($suf, '-#{$suf}', '');
  $right: $pre + '-right' + if($suf, '-#{$suf}', '');
  $all: $pre + if($suf, '-#{$suf}', '');

  $vals: collapse-directionals($vals);

  @if contains-falsy($vals) {
    @if nth($vals, 1) {
      #{$top}: nth($vals, 1);
    }

    @if length($vals) ==1 {
      @if nth($vals, 1) {
        #{$right}: nth($vals, 1);
      }
    } @else {
      @if nth($vals, 2) {
        #{$right}: nth($vals, 2);
      }
    }

    @if length($vals) ==2 {
      @if nth($vals, 1) {
        #{$bottom}: nth($vals, 1);
      }

      @if nth($vals, 2) {
        #{$left}: nth($vals, 2);
      }
    } @else if length($vals) ==3 {
      @if nth($vals, 3) {
        #{$bottom}: nth($vals, 3);
      }

      @if nth($vals, 2) {
        #{$left}: nth($vals, 2);
      }
    } @else if length($vals) ==4 {
      @if nth($vals, 3) {
        #{$bottom}: nth($vals, 3);
      }

      @if nth($vals, 4) {
        #{$left}: nth($vals, 4);
      }
    }
  } @else {
    #{$all}: $vals;
  }
}

// Provides a quick method for targeting `padding` on specific sides of a box. Use a `null` value to “skip” a side.
//
// @param {Arglist} $vals
//   List of arguments
//
// @example scss - Usage
//   .element {
//     @include padding(12vh null 10px 5%);
//   }
//
// @example css - CSS Output
//   .element {
//     padding-bottom: 10px;
//     padding-left: 5%;
//     padding-top: 12vh;
//   }
//
// @require {mixin} directional-property
//
// @output `padding`

@mixin padding($vals...) {
  @include directional-property(padding, false, $vals...);
}

// Provides a quick method for targeting `margin` on specific sides of a box. Use a `null` value to “skip” a side.
//
// @param {Arglist} $vals
//   List of arguments
//
// @example scss - Usage
//   .element {
//     @include margin(null 10px 3em 20vh);
//   }
//
// @example css - CSS Output
//   .element {
//     margin-bottom: 3em;
//     margin-left: 20vh;
//     margin-right: 10px;
//   }
//
// @require {mixin} directional-property
//
// @output `margin`

@mixin margin($vals...) {
  @include directional-property(margin, false, $vals...);
}

// ************************************
// ************************************
// ************* grid & breakpoints start *************
// ************************************
// ************************************
// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);

  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between(
  $lower,
  $upper,
  $breakpoints: $grid-breakpoints
) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min !=null and $max !=null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max==null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min==null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min !=null and $max !=null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max==null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min==null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

// Framework grid generation
@mixin make-grid-columns(
  $columns: $grid-columns,
  $gutter: $grid-gutter-width,
  $breakpoints: $grid-breakpoints
) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }

    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      .col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: 100%; // Reset earlier grid tiers
      }

      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      .order#{$infix}-first {
        order: -1;
      }

      .order#{$infix}-last {
        order: $columns + 1;
      }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} {
          order: $i;
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not($infix== '' and $i==0) {
          // Avoid emitting useless .offset-0
          .offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}

// Grid system
//
// Generate semantic grid columns with these mixins.
@mixin make-container($gutter: $grid-gutter-width) {
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
  margin-right: auto;
  margin-left: auto;
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths(
  $max-widths: $container-max-widths,
  $breakpoints: $grid-breakpoints
) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row($gutter: $grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$gutter / 2;
  margin-left: -$gutter / 2;
}

@mixin make-col-ready($gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num==0, 0, percentage($num));
}

// ************************************
// ************************************
// ************* grid & breakpoints end *************
// ************************************
// ************************************

// Mixin for styling form-placeholders
// @example scss - Usage
//   @include placeholder {
//    color: #333;
//   }
//
//   input[type='text'],
//   input[type='tel'],
//   input[type='email'] {
//     @include placeholder {
//      color: red;
//     }
//   }

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }

  &::-moz-placeholder {
    opacity: 1;
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }

  &.placeholder {
    @content;
  }
}
